{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "NewProducts"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "ExistingProducts"
				}
			],
			"sinks": [
				{
					"name": "DimensionTable"
				}
			],
			"transformations": [
				{
					"name": "CreateRowHash1"
				},
				{
					"name": "CheckForNewProduct"
				},
				{
					"name": "GetProductID"
				},
				{
					"name": "AddDimension"
				},
				{
					"name": "MarkAsInsert"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "FilterForActive"
				},
				{
					"name": "CreateRowHash2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as double,",
				"          ListPrice as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> NewProducts",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          EffectiveDate as timestamp,",
				"          Active as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExistingProducts",
				"NewProducts derive({Name,Color,StandardCost,ListPrice} = md5(Name,Color,StandardCost,ListPrice)) ~> CreateRowHash1",
				"CreateRowHash1 exists(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     negate:false,",
				"     broadcast: 'auto')~> CheckForNewProduct",
				"CheckForNewProduct keyGenerate(output(ProductID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> GetProductID",
				"GetProductID derive() ~> AddDimension",
				"AddDimension alterRow() ~> MarkAsInsert",
				"MarkAsInsert union(byName: true)~> UnionAllData",
				"ExistingProducts filter(Active == 1) ~> FilterForActive",
				"FilterForActive derive({Name,Color,StandardCost,ListPrice} = md5(Name,Color,StandardCost,ListPrice)) ~> CreateRowHash2",
				"UnionAllData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DimensionTable"
			]
		}
	}
}