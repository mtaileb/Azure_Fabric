{
	"name": "Flux_SCD2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "NewProducts"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "ExistingProducts"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "LookupMaxKey"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "DimensionTableSink"
				},
				{
					"name": "cacheKey"
				}
			],
			"transformations": [
				{
					"name": "CreateRowHash1"
				},
				{
					"name": "CheckForNewProducts"
				},
				{
					"name": "GetProductID"
				},
				{
					"name": "AddDimensionColumns"
				},
				{
					"name": "MarkAsInsert"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "FilterForActive"
				},
				{
					"name": "CreateRowHash2"
				},
				{
					"name": "FilterForExistingProducts"
				},
				{
					"name": "ObsoleteRow"
				},
				{
					"name": "MarkAsUpdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as double,",
				"          ListPrice as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> NewProducts",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          EffectiveDate as timestamp,",
				"          Active as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ExistingProducts",
				"source(output(",
				"          maxkey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max (ProductID) as maxkey from [SalesLT].[Product]',",
				"     format: 'query') ~> LookupMaxKey",
				"NewProducts derive(RowHash1 = md5(Name,Color,StandardCost,ListPrice)) ~> CreateRowHash1",
				"CreateRowHash1, CreateRowHash2 exists(NewProducts@ProductNumber == ExistingProducts@ProductNumber && RowHash1 == RowHash2",
				"/* Ignorer les lignes identiques dans les deux flux car elles ne sont si des nouvelles entrÃ©es, ni des updates */,",
				"     negate:true,",
				"     broadcast: 'left')~> CheckForNewProducts",
				"CheckForNewProducts keyGenerate(output(ProductID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> GetProductID",
				"GetProductID derive(ProductID = ProductID /*+toInteger(cacheKey#output().maxkey)*/,",
				"          Active = 1,",
				"          EffectiveDate = currentUTC()) ~> AddDimensionColumns",
				"AddDimensionColumns alterRow(insertIf(true())) ~> MarkAsInsert",
				"MarkAsInsert, MarkAsUpdate union(byName: true)~> UnionAllData",
				"ExistingProducts filter(Active == 1) ~> FilterForActive",
				"FilterForActive derive(RowHash2 = md5(Name,Color,StandardCost,ListPrice)) ~> CreateRowHash2",
				"CreateRowHash2, CreateRowHash1 exists(ExistingProducts@ProductNumber == NewProducts@ProductNumber && RowHash1 == RowHash2 /* Ignorer les lignes identiques */,",
				"     negate:true,",
				"     broadcast: 'left')~> FilterForExistingProducts",
				"FilterForExistingProducts derive(Active = 0) ~> ObsoleteRow",
				"ObsoleteRow alterRow(updateIf(true())) ~> MarkAsUpdate",
				"UnionAllData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          EffectiveDate as timestamp,",
				"          Active as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:true,",
				"     keys:['ProductID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductID,",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          Size,",
				"          Weight,",
				"          ProductCategoryID,",
				"          ProductModelID,",
				"          SellStartDate,",
				"          SellEndDate,",
				"          DiscontinuedDate,",
				"          ThumbNailPhoto,",
				"          ThumbnailPhotoFileName,",
				"          rowguid,",
				"          ModifiedDate,",
				"          EffectiveDate,",
				"          Active",
				"     )) ~> DimensionTableSink",
				"LookupMaxKey sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['maxkey'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> cacheKey"
			]
		}
	}
}